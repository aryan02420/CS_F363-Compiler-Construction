#!/usr/bin/env python

import sys
import argparse
import stat
import tetrislang
from pathlib import Path



parser = argparse.ArgumentParser()
parser.add_argument(
  'input_file', 
  help='path to the tlang (.tl) code to be compiled', 
  metavar='file.tl', 
  type=str,
  nargs='?')
parser.add_argument(
  '-o',
  '--output',
  dest='output_file', 
  required = False, 
  help='path to the output python (.py) code that will be generated post compilation', 
  metavar='game.py', 
  type=str)
parser.add_argument(
  '-d',
  '--debug', 
  required = False, 
  help='Show additional output', 
  default = False, 
  action='store_true')
parser.add_argument(
  '-s',
  '--silent', 
  required = False, 
  help='Hide output', 
  default = False, 
  action='store_true')
parser.add_argument(
  '-e',
  '--exec', 
  required = False, 
  help='Execute the out file', 
  default = False, 
  action='store_true')

args = parser.parse_args()

if args.debug:
  print(args)

input_code = ''

if args.input_file:
  with open(args.input_file, 'r') as f:
    input_code = f.read()
else:
  input_code = ''.join(sys.stdin.readlines())

out = tetrislang.TetrisCompiler(input_code, args.debug)

if args.output_file:
  with open(args.output_file, 'w') as f:
      f.write(out)
  f = Path(args.output_file)
  f.chmod(f.stat().st_mode | stat.S_IEXEC)
elif not args.silent:
  print(out)

if args.exec:
  exec(out)
