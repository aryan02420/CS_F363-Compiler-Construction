%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
%}

%token  VAR
%token  IDENT
%token  ASSIGN
%token  BOOL
%token  NUM
%token  ARRAY LSQBR RSQBR COMMA
%token  STRING
%token  MUL DIV MOD ADD SUB
%token  LT LTEQ GT GTEQ EQ NEQ 
%token  BITNOT SAL SAR BITAND BITXOR BITOR
%token  NOT AND OR
%token  FUNCTION LPAREN RPAREN
%token  BEGIN END
%token  IF THEN ELSE
%token  WHILE DO
%token  FOR TO
%token  COMMENT
%token  EOL

// lang specific
%token  BLOCK

%%


program                 :     statements EOL

statements              :     statement (EOL statement)*

statement               :     assignmentStatement     
                        |     functionStatement
                        |     compoundStatement
                        |     conditionalStatement
                        |     loopStatement
                        |     emptyStatement

assignmentStatement     :     IDENT ASSIGN expression 

functionStatement       :     FUNCTION IDENT LPAREN actparams? RPAREN

actparams               :     expression (COMMA expression)*

compoundStatement       :     BEGIN statements END

conditionalStatement    :     IF expression THEN statement (ELSE statement)*

loopStatement           :     WHILE expression DO statement
                        |     DO statement WHILE expression
                        |     FOR IDENT ASSIGN number TO number DO statement

emptyStatement          :     /*empty*/

variableDeclaration     :     VAR IDENT ASSIGN expression 

functionDeclaration     :     FUNCTION IDENT LPAREN fargs? RPAREN compoundStatement 

fargs                   :     IDENT (COMMA IDENT)*

expression              :     IDENT
                        |     arithExpression
                        |     boolExpression
                        |     relationalExpression
                        |     bitExpression

comment                 :     COMMENT .*?

boolExpression          :     andop 
                        |     expression OR andop

andop                   :     bitExpression
                        |     andop AND bitExpression

bitExpression           :     bitxorop
                        |     bitExpression BITOR bitxorop

bitxorop                :     bitandop
                        |     bitxorop BITXOR bitandop

bitandop                :     relationalExpression
                        |     bitandop BITAND relationalExpression

relationalExpression    :     cmpop
                        |     relationalExpression EQ cmpop
                        |     relationalExpression NEQ cmpop

cmpop                   :     shiftop
                        |     cmpop LT shiftop  
                        |     cmpop LTEQ shiftop  
                        |     cmpop GT shiftop  
                        |     cmpop GTEQ shiftop

shiftop                 :     addop
                        |     shiftop SAR addop
                        |     shiftop SAL addop
                  
addop                   :     mulop
                        |     addop ADD mulop
                        |     addop SUB mulop    
                  
mulop                   :     term
                        |     mulop MUL unary
                        |     mulop DIV unary
                        |     mulop MOD unary

unary                   :     term
                        |     NOT term
                        |     BITNOT term
                  
term                    :     NUM
                        |     BOOL
                        |     LPAREN expression RPAREN



///////////////////////////////////////////////////////////////////////////////

grammar pascal;


block
   : (labelDeclarationPart | constantDefinitionPart | typeDefinitionPart | variableDeclarationPart | procedureAndFunctionDeclarationPart | usesUnitsPart | IMPLEMENTATION)* compoundStatement
   ;

unsignedNumber
   : unsignedInteger
   | unsignedReal
   ;

unsignedInteger
   : NUM_INT
   ;

unsignedReal
   : NUM_REAL
   ;


formalParameterSection
   : parameterGroup
   | VAR parameterGroup
   | FUNCTION parameterGroup
   | PROCEDURE parameterGroup
   ;

parameterGroup
   : identifierList COLON typeIdentifier
   ;

identifierList
   : identifier (COMMA identifier)*
   ;


variable
   : (AT identifier | identifier) (LBRACK expression (COMMA expression)* RBRACK | LBRACK2 expression (COMMA expression)* RBRACK2 | DOT identifier | POINTER)*
   ;

expression
   : simpleExpression (relationaloperator expression)?
   ;

relationaloperator
   : EQUAL
   | NOT_EQUAL
   | LT
   | LE
   | GE
   | GT
   | IN
   ;

simpleExpression
   : term (additiveoperator simpleExpression)?
   ;

additiveoperator
   : PLUS
   | MINUS
   | OR
   ;

term
   : factor (multiplicativeoperator term)?
   ;

multiplicativeoperator
   : MUL
   | DIV
   | MOD
   | AND
   ;

factor
   : variable
   | LPAREN expression RPAREN
   | functionDesignator
   | unsignedConstant
   | set_
   | NOT factor
   | bool_
   ;

unsignedConstant
   : unsignedNumber
   | constantChr
   | string
   | NIL
   ;


WS
   : [ \t\r\n] -> skip
   ;


COMMENT_1
   : '(*' .*? '*)' -> skip
   ;


COMMENT_2
   : '{' .*? '}' -> skip
   ;


IDENT
   : ('a' .. 'z' | 'A' .. 'Z') ('a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_')*
   ;


STRING_LITERAL
   : '\'' ('\'\'' | ~ ('\''))* '\''
   ;


NUM_INT
   : ('0' .. '9') +
   ;


NUM_REAL
   : ('0' .. '9') + (('.' ('0' .. '9') + (EXPONENT)?)? | EXPONENT)
   ;


fragment EXPONENT
   : ('e') ('+' | '-')? ('0' .. '9') +
   ;