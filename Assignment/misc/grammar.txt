// generate diagrams https://bottlecaps.de/rr/ui

%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
%}

%token  VAR
%token  IDENT
%token  ASSIGN
%token  BOOL
%token  NUM
%token  LSQBR RSQBR COMMA
%token  STRING
%token  MUL DIV MOD ADD SUB
%token  LT LTEQ GT GTEQ EQ NEQ 
%token  BITNOT SAL SAR BITAND BITXOR BITOR
%token  NOT AND OR
%token  FUNCTION LPAREN RPAREN
%token  BEGIN END
%token  IF THEN ELSE
%token  WHILE DO
%token  FOR TO
%token  COMMENT
%token  EOL

// lang specific


%%


program                 ::=   statements EOL

statements              ::=   statement
                        |     statement moreStatements

moreStatements          ::=   EOL statement
                        |     EOL moreStatements

statement               ::=   assignmentStatement
                        |     variableDeclaration
                        |     functionStatement
                        |     functionDeclaration
                        |     compoundStatement
                        |     conditionalStatement
                        |     loopStatement
                        |     emptyStatement

assignmentStatement     ::=   IDENT ASSIGN expression 

functionStatement       ::=   IDENT LPAREN RPAREN
                        |     IDENT LPAREN actparams RPAREN

actparams               ::=   expression
                        |     expression moreparams

moreparams              ::=   COMMA expression
                        |     COMMA moreparams

compoundStatement       ::=   BEGIN statements END

conditionalStatement    ::=   IF expression THEN statements
                        |     IF expression THEN statements ELSE statements

loopStatement           ::=   WHILE expression DO statement
                        |     DO statement WHILE expression
                        |     FOR IDENT ASSIGN number TO number DO statement

emptyStatement          ::=   /*empty*/

variableDeclaration     ::=   VAR IDENT ASSIGN expression 

functionDeclaration     ::=   FUNCTION IDENT LPAREN RPAREN compoundStatement 
                        |     FUNCTION IDENT LPAREN fargs RPAREN compoundStatement 

fargs                   ::=   IDENT
                        |     IDENT morefargs

morefargs               ::=   COMMA IDENT
                        |     COMMA morefargs

expression              ::=   IDENT
                        |     binop
                        |     unop

binop                   ::=   unop                                                          { return f'{p.unop}'}
                        |     binop ADD unop                                                { return f'{p.binop} + {p.unop}'}
                        |     binop SUB unop                                                { return f'{p.binop} - {p.unop}'}    
                        |     binop MUL unop                                                { return f'{p.binop} * {p.unop}'}
                        |     binop DIV unop                                                { return f'{p.binop} / {p.unop}'}
                        |     binop MOD unop                                                { return f'{p.binop} % {p.unop}'}
                        |     binop LT unop                                                 { return f'{p.binop} < {p.unop}'}
                        |     binop LTEQ unop                                               { return f'{p.binop} <= {p.unop}'}
                        |     binop GT unop                                                 { return f'{p.binop} > {p.unop}'} 
                        |     binop GTEQ unop                                               { return f'{p.binop} >= {p.unop}'}
                        |     binop EQ unop                                                 { return f'{p.binop} == {p.unop}'}
                        |     binop NEQ unop                                                { return f'{p.binop} != {p.unop}'}
                        |     binop SAL unop                                                { return f'{p.binop} << {p.unop}'}
                        |     binop SAR unop                                                { return f'{p.binop} >> {p.unop}'}
                        |     binop BITAND unop                                             { return f'{p.binop} & {p.unop}'}
                        |     binop BITOR unop                                              { return f'{p.binop} | {p.unop}'}
                        |     binop BITXOR unop                                             { return f'{p.binop} ^ {p.unop}'}
                        |     binop AND unop                                                { return f'{p.binop} and {p.unop}'}
                        |     binop OR unop                                                 { return f'{p.binop} or {p.unop}'}

unop                    ::=   term
                        |     BITNOT term
                        |     NOT term
                  
term                    ::=   NUM
                        |     BOOL
                        |     LPAREN expression RPAREN